import camion.*
import cosas.*

describe "tests de Camion" { 

	fixture {
		camion.cargar(bumblebee)		
	}

	test "cargar algo al camion" {
		assert.equals(camion.cosas(),[bumblebee])
	}
	
	test "descargar algo del camion" {
		camion.descargar(bumblebee)
		assert.equals(camion.cosas(),[])
	}
	
	test "camion sin nada pesa solo su tara (1000)" {
		camion.descargar(bumblebee)
		assert.equals(camion.peso(),1000)
	}
	
	test "peso total del camion suma el peso de sus cosas y su tara" {
		
		assert.equals(camion.peso(),bumblebee.peso()+1000)
	}
	
	test "peso total del camion esta excedido (mayor a 2500)" {
		
		residuosRadiactivos.peso(1000)
		camion.cargar(residuosRadiactivos)
		camion.cargar(residuosRadiactivos)
		camion.cargar(residuosRadiactivos)
		assert.that(camion.estaExcedidoDePeso())
	}
	
	test "peso total del camion no esta excedido (hasta 2500)" {
		assert.notThat(camion.estaExcedidoDePeso())
	}
	
	test "lista de objetos con mas peligrosidad que N en el camion" {
		
		camion.cargar(knightRider)
		camion.cargar(packLadrillos)
		assert.equals(camion.objetosConMayorNivelPeligrosidad(99),[])
		
		residuosRadiactivos.peso(1000)
		camion.cargar(residuosRadiactivos)
		assert.equals(camion.objetosConMayorNivelPeligrosidad(100),[residuosRadiactivos])
		
		bateriaAntiaerea.cargarMisiles()
		camion.cargar(bateriaAntiaerea)
		assert.equals(camion.objetosConMayorNivelPeligrosidad(99),[residuosRadiactivos,bateriaAntiaerea])
	}
	
	test "todos los objetos mas peligrosos que <cosa>" {
		camion.cargar(knightRider)
		camion.cargar(packLadrillos)
		assert.equals(camion.objetosMasPeligrososQue(knightRider),[bumblebee])
		
		residuosRadiactivos.peso(1000)
		camion.cargar(residuosRadiactivos)
		assert.equals(camion.objetosMasPeligrososQue(bumblebee),[residuosRadiactivos])
		
		bateriaAntiaerea.cargarMisiles()
		camion.cargar(bateriaAntiaerea)
		assert.equals(camion.objetosMasPeligrososQue(bumblebee),[residuosRadiactivos,bateriaAntiaerea])
	
		camion.descargar(bateriaAntiaerea)
		camion.descargar(residuosRadiactivos)
		assert.equals(camion.objetosMasPeligrososQue(bumblebee),[])
	
	}
	
	test "no puede circular en ruta si algo supera peligrosidad" {
		assert.that(camion.puedeCircularEnRuta(31))
		assert.notThat(camion.puedeCircularEnRuta(30))
	}
	
	test "puede circular en ruta si nada supera peligrosidad" {
		assert.that(camion.puedeCircularEnRuta(60))
	}
	
	
	test "tiene Algo Que Pesa Entre 900 y 1001" {
		assert.notThat(camion.tieneAlgoQuePesaEntre(900, 1001))
	
		residuosRadiactivos.peso(900)
		camion.cargar(residuosRadiactivos)
		assert.that(camion.tieneAlgoQuePesaEntre(900, 1001))
	}
	
	test "cosa Mas Pesada" {
		camion.cargar(knightRider)
		assert.equals(camion.cosaMasPesada(),bumblebee)
		
		residuosRadiactivos.peso(1000)
		camion.cargar(residuosRadiactivos)
		assert.equals(camion.cosaMasPesada(),residuosRadiactivos)
		
	}
	
	
	test "bultos" {
		//Falta testear TODOS los casos
		assert.equals(camion.totalBultos(),2)
		camion.cargar(residuosRadiactivos) //1
		camion.cargar(knightRider) //1
		camion.cargar(arenaAgranel) //1
		camion.cargar(embalajeSeguridad) //2
		camion.cargar(bateriaAntiaerea) //sin 1, con 2.
		bateriaAntiaerea.descargarMisiles()
		assert.equals(camion.totalBultos(),8) //bumble=2
		
		camion.descargar(bateriaAntiaerea)
		bateriaAntiaerea.cargarMisiles()
		camion.cargar(bateriaAntiaerea)
		camion.cargar(packLadrillos) //hasta 100=1,101-299=2,+300=3
		assert.equals(camion.totalBultos(),10) 
		

		camion.descargar(packLadrillos)		
		packLadrillos.agregarLadrillos(101)
		camion.cargar(packLadrillos)
		assert.equals(camion.totalBultos(),11)
		
		
		camion.descargar(packLadrillos)		
		packLadrillos.agregarLadrillos(200)
		camion.cargar(packLadrillos)
		assert.equals(camion.totalBultos(),12)
		
		
		contenedorPortuario.cargar(bumblebee)
		camion.cargar(contenedorPortuario) //bulto de lo que contiene + 1
		assert.equals(camion.totalBultos(),15)
		
		camion.descargar(contenedorPortuario)
		contenedorPortuario.cargar(knightRider)
		camion.cargar(contenedorPortuario) //bulto de lo que contiene + 1
		assert.equals(camion.totalBultos(),16)
		
	}
	
	test "lista de pesos de la carga" {
		residuosRadiactivos.peso(985)
		camion.cargar(residuosRadiactivos)
		camion.cargar(knightRider)
		
		assert.equals([800,1000,500],camion.pesos())
	}
	
	test "comportamientos de las cosas al ser cargadas al camion" {
		//Falta testear TODOS los casos
		
		//knightRider no hace nada
		//bumblebee se transforma
		//packLadrillos agrega 12 ladrillos (osea, pesa 24)
		//arenaAgranel agrega 20kilos
		//bateriaAntiaerea carga misiles
		//contenedorPortuario hace que reaccione lo que tiene adentro
		//residuosRadiactivos agrega 15 kilos
		//embalajeSeguridad no hace nada
		
		//camion.cargar(knightRider)
		//camion.cargar(embalajeSeguridad)
		camion.cargar(packLadrillos)
		assert.equals(packLadrillos.peso(),24)
		
		camion.cargar(arenaAgranel)
		assert.equals(arenaAgranel.peso(),20)
		
		camion.cargar(bateriaAntiaerea)
		assert.equals(bateriaAntiaerea.peso(), 300)
		
		bumblebee.transformar()
		assert.equals(bumblebee.peligrosidad(),15)
		contenedorPortuario.cargar(knightRider)
		contenedorPortuario.cargar(embalajeSeguridad)
		contenedorPortuario.cargar(bumblebee)
		camion.cargar(contenedorPortuario)
		assert.equals(bumblebee.peligrosidad(),30)
		
		camion.cargar(residuosRadiactivos)
		assert.equals(residuosRadiactivos.peso(),15)
	}
	
}
